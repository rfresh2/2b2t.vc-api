openapi: 3.0.0
servers:
  - description: Mojang Session API
    url: https://sessionserver.mojang.com
info:
  version: "1.0.0"
  description: Mojang's official session server API
  title: "Mojang Session API"
  termsOfService: "https://www.minecraft.net/en-us/terms"
  contact:
    email: "theairblow.help@gmail.com"
tags:
  - name: "all"
    description: "All endpoints"
paths:
  /session/minecraft/profile/{uuid}:
    get:
      tags:
        - "all"
      summary: "Get user's profile by UUID"
      operationId: "getProfileByUuid"
      description: |
        * The timestamp is sometimes in the past (probably due to cached results?)
        * If no custom skin has been set, "SKIN" will be missing.
        * Likewise "CAPE" will be missing if the account has no cape.
        * Whether the player has the “Alex?” or “Steve?” skin depends on [the Java hashCode](http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/UUID.java#l394) of their UUID. Steve is used for even hashes. Example implementations:
        [JavaScript (includes explanation)](https://github.com/crafatar/crafatar/blob/9d2fe0c45424de3ebc8e0b10f9446e7d5c3738b2/lib/skins.js#L90-L108)
        [Java (includes sample UUIDs)](https://web.archive.org/web/20151022205119/https://gist.github.com/jomo/9968b8d572c38e1b1f4c)
      parameters:
        - in: path
          name: uuid
          description: Trimmed UUID
          required: true
          schema:
            type: string
          example: f1bfcbddc68b49bfaac9fb9d8ce5293d
        - in: query
          name: unsigned
          description: "false to append signature, true to omit"
          required: true
          schema:
            type: boolean
          example: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Trimmed UUID
                    type: string
                  name:
                    description: Username
                    type: string
                  properties:
                    description: Account's properties
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          description: Name of the property
                          type: string
                          enum: [ textures ]
                        value:
                          description: |
                            Base64 encoded property value, 
                            for textures see Textures scheme below
                          type: string
                        signature:
                          description: Base64 encoded signature of value
                          type: string
                  legacy:
                    description: Present if the account is legacy
                    type: boolean
              examples:
                Example:
                  value: |
                    {
                      "id": "f1bfcbddc68b49bfaac9fb9d8ce5293d",
                      "name": "123lmfao4",
                      "properties": [{
                        "name": "textures",
                        "value": "[Huge base64 property value in here]",
                        "signature": "[Huge base64 signature in here]"
                      }],
                      "legacy": true
                    }
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    description: Error description
                    type: string
                  path:
                    description: Endpoint path
                    type: string
              examples:
                InvalidUuid:
                  summary: Invalid UUID
                  value:
                    error: Bad Request
                    path: /session/minecraft/profile/invalid_uuid
        "204":
          description: Account with this UUID does not exist
  /blockedservers:
    get:
      tags:
        - "all"
      summary: "Get blocked servers"
      description: |
        This endpoint lists SHA1 hashes of all of the server IPs & domains that Mojang blocks.
        
        Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a `*`. Specifically, it splits based off of the `.` in the domain, goes through each section removing one at a time. For instance, for `mc.example.com`, it would try `mc.example.com`, `*.example.com`, and `*.com`. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for `192.168.0.1`, it would try `192.168.0.1`, `192.168.0.*`, `192.168.*`, and `192.*`.
        
        This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+).
      operationId: "getBlockedServers"
      responses:
        "200":
          description: OK
          content:
            "*/*":
              examples:
                Example:
                  value: |
                    72fd29f430c91c583bb7216fe673191dc25a7e18
                    e38e82a54b47c7c5394670bb34b3aa941219959b
                    d1bab7fcb1d44a0ad1084fb201006d79d05ae6e7
                    1822a17662c7e0cf3b815c257d32c2aa0245fad0
                    7905e1eeee5d57268bb9cbea2e0acbb5421a667b
                    56c7a4ccff309d6eb3c5737fe9509c3555e7f5fa
                    cf2f874a649da0118f717f7edb1f5fffcbae8c6b
                    c800614f07e155ca842e23f84c6a553973ccdb1f
                    dcc63fadc759ee712cdd5b7bade3bb3eff804637
                    96ea6aaf66aea5881b38ebbf66df686e8613f1db
components:
  schemas:
    Textures:
      type: object
      properties:
        timestamp:
          description: Unix timestamp when you sent the request
          type: number
        profileId:
          description: Trimmed UUID
          type: string
        profileName:
          description: Username
          type: string
        signatureRequired:
          description: "Present if the unsigned query parameter is false"
          type: boolean
        textures:
          description: Textures themselves
          type: object
          properties:
            SKIN:
              description: Skin
              type: object
              properties:
                url:
                  description: URL of the texture
                  type: string
                metadata:
                  description: Metadata
                  type: object
                  properties:
                    model:
                      description: Skin's model
                      type: string
                      enum: [ classic, slim ]
            CAPE:
              description: Cape
              type: object
              properties:
                url:
                  description: URL of the texture
                  type: string
    ErrorApi:
      type: object
      properties:
        error:
          type: string
        errorMessage:
          type: string
