openapi: 3.0.0
servers:
  - description: Public Mojang API
    url: https://api.mojang.com
info:
  version: "1.0.0"
  description: Mojang's official public API
  title: "Public Mojang API"
  termsOfService: "https://www.minecraft.net/en-us/terms"
  contact:
    email: "theairblow.help@gmail.com"
tags:
  - name: "orders"
    description: "Sale statistics"
  - name: "profiles"
    description: "User profiles"
  - name: "security"
    description: "Security questions"
  - name: "credit"
    description: "Credit cards"
  - name: "profile"
    description: "Gets a profile by username"
paths:
  /orders/statistics:
    post:
      deprecated: true
      tags:
        - "orders"
      summary: "Get sale statistics"
      description: This service was closed down by Mojang on 8 March 2022 because it didn't represent the total sales of Minecraft. The counter stopped at 45.6M Minecraft Java and 305k Minecraft Dungeons sales. Ined posted a statement on [Twitter](https://twitter.com/Mojang_Ined/status/1501541417784852484).
      operationId: "getStatistics"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metricKeys:
                  type: array
                  items:
                    $ref: '#/components/schemas/GameSalesEnum'
      responses:
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                NoMetricKeys:
                  summary: "metricKeys is empty"
                  value:
                    error: IllegalArgumentException
                    errorMessage: No key provided.
                MetricKeysIsNull:
                  summary: "metricKeys is null"
                  value:
                    error: IllegalArgumentException
                    errorMessage: keys can not be null.
                InvalidJson:
                  summary: "Invalid JSON"
                  value:
                    error: JsonMappingException
                    errorMessage: JSON exception message would be here
        "200":
          description: OK
          content:
            applicatiom/json:
              schema:
                type: object
                properties:
                  total:
                    description: Total sales
                    type: integer
                  last24h:
                    description: Sales in last 24 hours
                    type: integer
                  saleVelocityPerSeconds:
                    description: Average sales per second
                    type: number
  /profiles/minecraft:
    post:
      tags:
        - "profiles"
      summary: "Username to UUID"
      operationId: "getProfileUuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example: [ "thx", "Dusks", "tanpug", "D__G", "Gr8_Escape", "Paradox", "Ooh", "Tremendous", "Hexene", "emotional" ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProfileLookup"
              examples:
                Example:
                  summary: "Example"
                  value: |
                    [
                      {
                        "id": "6d752bb0ef41432a825a4d44185de121",
                        "name": "Gr8_Escape"
                      },
                      {
                        "id": "7211ae0bdb3f4680ae7cb34f2c4befc0",
                        "name": "Hexene"
                      },
                      {
                        "id": "8af296533b6844d085932742dca689c9",
                        "name": "Dusks"
                      },
                      {
                        "id": "c7b3d49c580c4af2a824ca07b37ff2f9",
                        "name": "D__G"
                      },
                      {
                        "id": "b3d0b85c9daf43d387f72696bdb618a1",
                        "name": "Paradox"
                      },
                      {
                        "id": "f0d9de88bbb54c9eae429cd8fbd693ab",
                        "name": "tanpug"
                      },
                      {
                        "id": "42d414a31d3e456bb08864e254abfd54",
                        "name": "emotional"
                      },
                      {
                        "id": "3e290b0243cf47f9801fa162ae7f0ff6",
                        "name": "Ooh"
                      },
                      {
                        "id": "44717d8d18c8430184defff3a92167a0",
                        "name": "thx"
                      },
                      {
                        "id": "7d96137e15a24f09b79f2366199d822e",
                        "name": "Tremendous"
                      }
                    ]
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                TooManyUsernames:
                  summary: "Specified too many names"
                  value:
                    error: IllegalArgumentException
                    errorMessage: Not more that 10 profile name per call is allowed.
                TooLong:
                  summary: "Username is too long"
                  value:
                    error: BadRequestException
                    errorMessage: obviouslyanamethatistoolongforminecraft is invalid
                InvalidCharacter:
                  summary: "Invalid character"
                  value:
                    error: BadRequestException
                    errorMessage: \& is invalid
                InvalidJson:
                  summary: "Invalid JSON"
                  value:
                    error: JsonMappingException
                    errorMessage: JSON exception message would be here
        "405":
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                MethodNotAllowed:
                  summary: "Method not allowed"
                  value:
                    error: Method Not Allowed
                    errorMessage: The method specified in the request is not allowed for the resource identified by the request URI
        "415":
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                UnsupportedMediaType:
                  summary: Unsupported media type
                  value:
                    error: Unsupported Media Type
                    errorMessage: The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                TooManyRequests:
                  summary: Too many requests
                  value:
                    error: TooManyRequestsException
                    errorMessage: The client has sent too many requests within a certain amount of time
  /users/profiles/minecraft/{username}:
    get:
      tags:
        - "profile"
      summary: Username to UUID
      operationId: "getProfileFromUsername"
      parameters:
        - in: path
          name: username
          description: Player username
          required: true
          schema:
            type: string
          example: Notch
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UUIDAndUser"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                  errorMessage:
                    type: string
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                TooManyRequests:
                  summary: Too many requests
                  value:
                    error: TooManyRequestsException
                    errorMessage: The client has sent too many requests within a certain amount of time
  /user/profile/{uuid}:
    get:
      tags:
        - "profiles"
      summary: "UUID to username"
      operationId: "getProfileUsername"
      parameters:
        - in: path
          name: uuid
          description: Account's Trimmed UUID
          required: true
          schema:
            type: string
          example: cdb5aee80f904fdda63ba16d38cd6b3b
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Trimmed UUID
                    type: string
                  name:
                    description: Username
                    type: string
              examples:
                Example:
                  summary: "Example"
                  value: |
                    {
                      "name" : "lukethehacker23",
                      "id" : "cdb5aee80f904fdda63ba16d38cd6b3b"
                    }
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                InvalidUuid:
                  summary: "Invalid UUID size"
                  value:
                    error: BadRequestException
                    errorMessage: "Invalid ID size: cdb5aee80f904fdda63ba16d38cd6b3bsaf54sda54"
        "405":
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                MethodNotAllowed:
                  summary: "Method not allowed"
                  value:
                    error: Method Not Allowed
                    errorMessage: The method specified in the request is not allowed for the resource identified by the request URI
        "415":
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                UnsupportedMediaType:
                  summary: Unsupported media type
                  value:
                    error: Unsupported Media Type
                    errorMessage: The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                TooManyRequests:
                  summary: Too many requests
                  value:
                    error: TooManyRequestsException
                    errorMessage: The client has sent too many requests within a certain amount of time
  /user/profiles/{uuid}/names:
    get:
      tags:
        - "profiles"
      summary: "User's name history"
      operationId: "getProfileNameHistory"
      parameters:
        - in: path
          name: uuid
          description: Account's Trimmed UUID
          required: true
          schema:
            type: string
          example: f933f85fc46046038e5f579ee1c919c5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    changedToAt:
                      description: Unix Timestamp
                      type: integer
                    name:
                      description: Username
                      type: string
              examples:
                Example:
                  summary: "Example"
                  value: |
                    [
                      {
                        "name" : "Blaschki"
                      },
                      {
                        "name" : "SuperSimon26",
                        "changedToAt" : 1532898007000
                      },
                      {
                        "name" : "UNHhhhhh",
                        "changedToAt" : 1564349304000
                      },
                      {
                        "name" : "FireWire",
                        "changedToAt" : 1604340219000
                      }
                    ]
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                InvalidUuid:
                  summary: "Invalid UUID size"
                  value:
                    error: BadRequestException
                    errorMessage: "Invalid ID size: cdb5aee80f904fdda63ba16d38cd6b3bsaf54sda54"
        "405":
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                MethodNotAllowed:
                  summary: "Method not allowed"
                  value:
                    error: Method Not Allowed
                    errorMessage: The method specified in the request is not allowed for the resource identified by the request URI
        "415":
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                UnsupportedMediaType:
                  summary: Unsupported media type
                  value:
                    error: Unsupported Media Type
                    errorMessage: The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                TooManyRequests:
                  summary: Too many requests
                  value:
                    error: TooManyRequestsException
                    errorMessage: The client has sent too many requests within a certain amount of time
  /user/security/location:
    get:
      security:
        - AccessToken: [ ]
      tags:
        - "security"
      summary: "Is your IP trusted"
      operationId: "isIpTrusted"
      responses:
        "204":
          description: Your IP is trusted
        "403":
          description: Your IP is not trusted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                UnsupportedMediaType:
                  summary: Your IP is not trusted
                  value:
                    error: ForbiddenOperationException
                    errorMessage: Current IP is not secured
        "401":
          description: Invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                Unauthorized:
                  summary: Invalid access token
                  value:
                    error: Unauthorized
                    errorMessage: The request requires user authentication
    post:
      security:
        - AccessToken: [ ]
      tags:
        - "security"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Answer ID
                    type: integer
                  answer:
                    description: Answer itself
                    type: string
            example: |
              [
                {
                  "id": 123,
                  "answer": "foo"
                },
                {
                  "id": 456,
                  "answer": "bar"
                },
                {
                  "id": 789,
                  "answer": "baz"
                }
              ]
      summary: "Send security answers"
      operationId: "sendSecurityAnswers"
      responses:
        "204":
          description: Your IP is now trusted
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                Duplicate:
                  summary: Duplicate answers
                  value:
                    error: IllegalArgumentException
                    errorMessage: 3 answers required to secure location
        "401":
          description: Invalid answers or invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                Unauthorized:
                  summary: Invalid access token
                  value:
                    error: Unauthorized
                    errorMessage: The request requires user authentication
                InvalidAnswers:
                  summary: Invalid answers
                  value:
                    error: ForbiddenOperationException
                    errorMessage: At least one answer was incorrect
  /user/security/challenges:
    get:
      security:
        - AccessToken: [ ]
      tags:
        - "security"
      summary: "Get security questions"
      operationId: "getSecurityQuestions"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    answer:
                      type: object
                      properties:
                        id:
                          description: Answer ID used later
                          type: integer
                    question:
                      type: object
                      properties:
                        id:
                          $ref: "#/components/schemas/SecurityQuestionEnum"
                        question:
                          description: The question itself (you do not have to use the enum)
                          type: string
              examples:
                SecurityQuestions:
                  summary: Security questions
                  value: |
                    [
                       {
                          "answer": {
                             "id": 123
                          },
                          "question": {
                             "id": 1,
                             "question": "What is your favorite pet's name?"
                          }
                       },
                       {
                          "answer": {
                             "id": 456
                          },
                          "question": {
                             "id": 26,
                             "question": "What was your first gaming console?"
                          }
                       },
                       {
                          "answer": {
                             "id": 789
                          },
                          "question": {
                             "id": 34,
                             "question": "What is your favorite ice cream flavor?"
                          }
                       }
                    ]
        "401":
          description: Invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                Unauthorized:
                  summary: Invalid access token
                  value:
                    error: Unauthorized
                    errorMessage: The request requires user authentication
  /user:
    get:
      security:
        - AccessToken: [ ]
      tags:
        - "profiles"
      summary: "Get your profile (to get more information, use Microsoft Services API)"
      operationId: "getYourProfile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: "Internal Mojang account identifier"
                    type: string
                  email:
                    description: "Account's email"
                    type: string
                  username:
                    description: "Username for legacy accounts, email for migrated"
                    type: string
                  dateOfBirth:
                    description: "Date of birth, unix timestamp"
                    type: integer
                  secured:
                    description: "Are security questions set"
                    type: boolean
                  emailVerified:
                    description: "Was the email verified"
                    type: boolean
                  legacyUser:
                    description: "Is this a legacy account"
                    type: boolean
                  verifiedByParent:
                    description: "Is parental consent enabled"
                    type: boolean
                  hashed:
                    description: "API no longer sends the hash instead of the email even if this is set"
                    type: boolean
              examples:
                MigratedAccount:
                  summary: Migrated account
                  value: |
                    {
                      "id": "026cb82ad0c006a2d7e4fe9df19620ad",
                      "email": "coolemail@domain.tld",
                      "username": "coolemail@domain.tld",
                      "dateOfBirth": 849624812000,
                      "secured": true,
                      "emailVerified": true,
                      "legacyUser": false,
                      "verifiedByParent": false,
                      "hashed": false
                    }
                LegacyAccount:
                  summary: Legacy account
                  value: |
                    {
                      "id": "1253680",
                      "email": "N/A",
                      "username": "coolusername2",
                      "secured": false,
                      "emailVerified": true,
                      "legacyUser": true,
                      "verifiedByParent": false,
                      "hashed": true
                    }
        "401":
          description: Invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                Unauthorized:
                  summary: Invalid access token
                  value:
                    error: UnauthorizedOperationException
                    errorMessage: User not authenticated
  /creditcards:
    get:
      security:
        - AccessToken: [ ]
      tags:
        - "credit"
      summary: "Get your credit cards"
      operationId: "getCreditCards"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: Credit Card ID
                      type: string
                    storedInVault:
                      description: Is it stored
                      type: boolean
                    billingAddress:
                      type: object
                      properties:
                        id:
                          description: Unknown
                          type: string
                        userId:
                          description: Internal Mojang user ID
                          type: string
                        countryCode:
                          description: Country Code
                          type: string
                        postalCode:
                          description: Postal code
                          type: string
                        creditCardId:
                          description: Unknown
                          type: string
                        newAddress:
                          description: Is this a new address
                          type: boolean
                    userId:
                      description: Internal Mojang user ID
                      type: string
                    last4:
                      description: Last four digits of the card number
                      type: string
                    cardType:
                      description: Card's type
                      type: string
                      enum: [ Visa, MasterCard, etc. ]
                    provider:
                      description: Provider
                      type: string
                      enum: [ braintree, moneybookers, ayden, skrill, dibs, paypal ]
                    paymentInfo:
                      description: Redacted card number
                      type: string
                    createdAt:
                      description: When was the credit card added, unix timestamp
                      type: integer
                    storedInVaultAt:
                      description: When the credit card info was stored, unix timestamp
                      type: integer
                    newCreditCard:
                      description: Is this a new credit card
                      type: boolean
              examples:
                Example:
                  summary: Example
                  value: |
                    [
                      {
                        "id": "a85887bf0ffd80d5a6addd6ff5aa278a",
                        "storedInVault": true,
                        "billingAddress": {
                          "id": "30459174",
                          "userId": "88a4eeb5bd5a4640aa3865878aec6d6b",
                          "countryCode": "US",
                          "postalCode": "95014",
                          "creditCardId": "145447b03f0d43c5a6accd60f5aa2741",
                          "newAddress": false
                        },
                        "userId": "88a4eeb5bd5a4640aa3865878aec6d6b",
                        "last4": "4272",
                        "cardType": "Visa",
                        "provider": "braintree",
                        "paymentInfo": "434283**4272",
                        "createdAt": 1597463065000,
                        "storedInVaultAt": 1597463067000,
                        "newCreditCard": false
                      }
                    ]
        "401":
          description: Invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                Unauthorized:
                  summary: Invalid access token
                  value:
                    error: UnauthorizedOperationException
                    errorMessage: User not authenticated
  /users/password:
    put:
      security:
        - AccessToken: [ ]
      tags:
        - "profiles"
      summary: "Set account's password (Mojang only)"
      operationId: "setPassword"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  description: Old password
                  type: string
                password:
                  description: New password
                  type: string
            example: |
              {
                "oldPassword" : "password12345",
                "password" : "6ipo8Y%GMxM544V%$h*&M*#%7!D*897%"
              }
      responses:
        "204":
          description: Successfully changed the password
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                UnsequreRequest:
                  summary: "Insequre request (unknown)"
                  value:
                    error: IllegalArgumentException
                    errorMessage: Unsecure request
                OldPasswordInvalid:
                  summary: "Old password is invalid"
                  value:
                    error: IllegalArgumentException
                    errorMessage: Old password invalid.
                InvalidJson:
                  summary: "Invalid JSON"
                  value:
                    error: JsonMappingException
                    errorMessage: JSON exception message would be here
        "401":
          description: Invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApi"
              examples:
                Unauthorized:
                  summary: Invalid access token
                  value:
                    error: Unauthorized
                    errorMessage: The request requires user authentication
components:
  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
  schemas:
    ProfileLookup:
      type: object
      properties:
        id:
          description: UUID
          type: string
        name:
          description: Username
          type: string
        legacy:
          description: Is present if the account is legacy
          type: boolean
        demo:
          description: Is Present if the account is demo (unpaid)
          type: boolean
    UUIDAndUser:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
    SecurityQuestionEnum:
      type: integer
      enum: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 ]
      description: >
        Security question IDs:
          1) What is your favorite pet's name?
          2) What is your favorite movie?
          3) What is your favorite author's last name?
          4) What is your favorite artist's last name?
          5) What is your favorite actor's last name?
          6) What is your favorite activity?
          7) What is your favorite restaurant?
          8) What is the name of your favorite cartoon?
          9) What is the name of the first school you attended?
          10) What is the last name of your favorite teacher?
          11) What is your best friend's first name?
          12) What is your favorite cousin's name?
          13) What was the first name of your first girl/boyfriend?
          14) What was the name of your first stuffed animal?
          15) What is your mother's middle name?
          16) What is your father's middle name?
          17) What is your oldest sibling's middle name?
          18) In what city did your parents meet?
          19) In what hospital were you born?
          20) What is your favorite team?
          21) How old were you when you got your first computer?
          22) How old were you when you got your first gaming console?
          23) What was your first video game?
          24) What is your favorite card game?
          25) What is your favorite board game?
          26) What was your first gaming console?
          27) What was the first book you ever read?
          28) Where did you go on your first holiday?
          29) In what city does your grandmother live?
          30) In what city does your grandfather live?
          31) What is your grandmother's first name?
          32) What is your grandfather's first name?
          33) What is your least favorite food?
          34) What is your favorite ice cream flavor?
          35) What is your favorite ice cream flavor?
          36) What is your favorite place to visit?
          37) What is your dream job?
          38) What color was your first pet?
          39) What is your lucky number?
    ErrorApi:
      type: object
      properties:
        error:
          type: string
        errorMessage:
          type: string
    GameSalesEnum:
      type: string
      enum: [ item_sold_minecraft, prepaid_card_redeemed_minecraft, item_sold_cobalt,   prepaid_card_redeemed_cobalt, item_sold_scrolls, item_sold_dungeons ]
      description: >
        Metrics types:
          * `item_sold_minecraft` - Sold copies of Minecraft
        
          * `prepaid_card_redeemed_minecraft` - Sold copies of Minecraft via gift card
          * `item_sold_cobalt` - Sold copies of Cobalt
          * `prepaid_card_redeemed_cobalt` - Sold copies of Cobalt via gift card
          * `item_sold_scrolls` - Sold copies of Scrolls
          * `item_sold_dungeons` - Sold copies of Minecraft Dungeons
