/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Public;
import vc.data.dto.tables.records.TopDeathsMonthViewRecord;

import java.util.Collection;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TopDeathsMonthView extends TableImpl<TopDeathsMonthViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.top_deaths_month_view</code>
     */
    public static final TopDeathsMonthView TOP_DEATHS_MONTH_VIEW = new TopDeathsMonthView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TopDeathsMonthViewRecord> getRecordType() {
        return TopDeathsMonthViewRecord.class;
    }

    /**
     * The column <code>public.top_deaths_month_view.victim_player_name</code>.
     */
    public final TableField<TopDeathsMonthViewRecord, String> VICTIM_PLAYER_NAME = createField(DSL.name("victim_player_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.top_deaths_month_view.victim_player_uuid</code>.
     */
    public final TableField<TopDeathsMonthViewRecord, UUID> VICTIM_PLAYER_UUID = createField(DSL.name("victim_player_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.top_deaths_month_view.death_count</code>.
     */
    public final TableField<TopDeathsMonthViewRecord, Long> DEATH_COUNT = createField(DSL.name("death_count"), SQLDataType.BIGINT, this, "");

    private TopDeathsMonthView(Name alias, Table<TopDeathsMonthViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TopDeathsMonthView(Name alias, Table<TopDeathsMonthViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "top_deaths_month_view" as  SELECT victim_player_name,
           victim_player_uuid,
           count(*) AS death_count
          FROM deaths
         WHERE ("time" >= (CURRENT_DATE - '30 days'::interval))
         GROUP BY victim_player_name, victim_player_uuid
         ORDER BY (count(*)) DESC
        LIMIT 1000;
        """), where);
    }

    /**
     * Create an aliased <code>public.top_deaths_month_view</code> table
     * reference
     */
    public TopDeathsMonthView(String alias) {
        this(DSL.name(alias), TOP_DEATHS_MONTH_VIEW);
    }

    /**
     * Create an aliased <code>public.top_deaths_month_view</code> table
     * reference
     */
    public TopDeathsMonthView(Name alias) {
        this(alias, TOP_DEATHS_MONTH_VIEW);
    }

    /**
     * Create a <code>public.top_deaths_month_view</code> table reference
     */
    public TopDeathsMonthView() {
        this(DSL.name("top_deaths_month_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public TopDeathsMonthView as(String alias) {
        return new TopDeathsMonthView(DSL.name(alias), this);
    }

    @Override
    public TopDeathsMonthView as(Name alias) {
        return new TopDeathsMonthView(alias, this);
    }

    @Override
    public TopDeathsMonthView as(Table<?> alias) {
        return new TopDeathsMonthView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TopDeathsMonthView rename(String name) {
        return new TopDeathsMonthView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TopDeathsMonthView rename(Name name) {
        return new TopDeathsMonthView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TopDeathsMonthView rename(Table<?> name) {
        return new TopDeathsMonthView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopDeathsMonthView where(Condition condition) {
        return new TopDeathsMonthView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopDeathsMonthView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopDeathsMonthView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopDeathsMonthView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TopDeathsMonthView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TopDeathsMonthView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TopDeathsMonthView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TopDeathsMonthView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopDeathsMonthView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TopDeathsMonthView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
