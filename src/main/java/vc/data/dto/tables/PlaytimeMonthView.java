/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Public;
import vc.data.dto.tables.records.PlaytimeMonthViewRecord;

import java.math.BigDecimal;
import java.util.UUID;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PlaytimeMonthView extends TableImpl<PlaytimeMonthViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.playtime_month_view</code>
     */
    public static final PlaytimeMonthView PLAYTIME_MONTH_VIEW = new PlaytimeMonthView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaytimeMonthViewRecord> getRecordType() {
        return PlaytimeMonthViewRecord.class;
    }

    /**
     * The column <code>public.playtime_month_view.p_uuid</code>.
     */
    public final TableField<PlaytimeMonthViewRecord, UUID> P_UUID = createField(DSL.name("p_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.playtime_month_view.pt_days</code>.
     */
    public final TableField<PlaytimeMonthViewRecord, BigDecimal> PT_DAYS = createField(DSL.name("pt_days"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.playtime_month_view.p_name</code>.
     */
    public final TableField<PlaytimeMonthViewRecord, String> P_NAME = createField(DSL.name("p_name"), SQLDataType.CLOB, this, "");

    private PlaytimeMonthView(Name alias, Table<PlaytimeMonthViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlaytimeMonthView(Name alias, Table<PlaytimeMonthViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.materializedView());
    }

    /**
     * Create an aliased <code>public.playtime_month_view</code> table reference
     */
    public PlaytimeMonthView(String alias) {
        this(DSL.name(alias), PLAYTIME_MONTH_VIEW);
    }

    /**
     * Create an aliased <code>public.playtime_month_view</code> table reference
     */
    public PlaytimeMonthView(Name alias) {
        this(alias, PLAYTIME_MONTH_VIEW);
    }

    /**
     * Create a <code>public.playtime_month_view</code> table reference
     */
    public PlaytimeMonthView() {
        this(DSL.name("playtime_month_view"), null);
    }

    public <O extends Record> PlaytimeMonthView(Table<O> child, ForeignKey<O, PlaytimeMonthViewRecord> key) {
        super(child, key, PLAYTIME_MONTH_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public PlaytimeMonthView as(String alias) {
        return new PlaytimeMonthView(DSL.name(alias), this);
    }

    @Override
    public PlaytimeMonthView as(Name alias) {
        return new PlaytimeMonthView(alias, this);
    }

    @Override
    public PlaytimeMonthView as(Table<?> alias) {
        return new PlaytimeMonthView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeMonthView rename(String name) {
        return new PlaytimeMonthView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeMonthView rename(Name name) {
        return new PlaytimeMonthView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeMonthView rename(Table<?> name) {
        return new PlaytimeMonthView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, BigDecimal, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super BigDecimal, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super BigDecimal, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
