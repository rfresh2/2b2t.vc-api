/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Indexes;
import vc.data.dto.Public;
import vc.data.dto.tables.records.PlayercountRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Playercount extends TableImpl<PlayercountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.playercount</code>
     */
    public static final Playercount PLAYERCOUNT = new Playercount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayercountRecord> getRecordType() {
        return PlayercountRecord.class;
    }

    /**
     * The column <code>public.playercount.time</code>.
     */
    public final TableField<PlayercountRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.playercount.count</code>.
     */
    public final TableField<PlayercountRecord, Short> COUNT = createField(DSL.name("count"), SQLDataType.SMALLINT.nullable(false), this, "");

    private Playercount(Name alias, Table<PlayercountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Playercount(Name alias, Table<PlayercountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.playercount</code> table reference
     */
    public Playercount(String alias) {
        this(DSL.name(alias), PLAYERCOUNT);
    }

    /**
     * Create an aliased <code>public.playercount</code> table reference
     */
    public Playercount(Name alias) {
        this(alias, PLAYERCOUNT);
    }

    /**
     * Create a <code>public.playercount</code> table reference
     */
    public Playercount() {
        this(DSL.name("playercount"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYERCOUNT_TIME_IDX);
    }

    @Override
    public Playercount as(String alias) {
        return new Playercount(DSL.name(alias), this);
    }

    @Override
    public Playercount as(Name alias) {
        return new Playercount(alias, this);
    }

    @Override
    public Playercount as(Table<?> alias) {
        return new Playercount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Playercount rename(String name) {
        return new Playercount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Playercount rename(Name name) {
        return new Playercount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Playercount rename(Table<?> name) {
        return new Playercount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Playercount where(Condition condition) {
        return new Playercount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Playercount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Playercount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Playercount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Playercount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Playercount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Playercount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Playercount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Playercount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Playercount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
