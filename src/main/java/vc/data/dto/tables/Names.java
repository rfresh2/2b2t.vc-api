/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Public;
import vc.data.dto.tables.records.NamesRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Names extends TableImpl<NamesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.names</code>
     */
    public static final Names NAMES = new Names();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NamesRecord> getRecordType() {
        return NamesRecord.class;
    }

    /**
     * The column <code>public.names.name</code>.
     */
    public final TableField<NamesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.names.uuid</code>.
     */
    public final TableField<NamesRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.names.changedtoat</code>.
     */
    public final TableField<NamesRecord, OffsetDateTime> CHANGEDTOAT = createField(DSL.name("changedtoat"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.names.changedfromat</code>.
     */
    public final TableField<NamesRecord, OffsetDateTime> CHANGEDFROMAT = createField(DSL.name("changedfromat"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Names(Name alias, Table<NamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Names(Name alias, Table<NamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.names</code> table reference
     */
    public Names(String alias) {
        this(DSL.name(alias), NAMES);
    }

    /**
     * Create an aliased <code>public.names</code> table reference
     */
    public Names(Name alias) {
        this(alias, NAMES);
    }

    /**
     * Create a <code>public.names</code> table reference
     */
    public Names() {
        this(DSL.name("names"), null);
    }

    public <O extends Record> Names(Table<O> child, ForeignKey<O, NamesRecord> key) {
        super(child, key, NAMES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Names as(String alias) {
        return new Names(DSL.name(alias), this);
    }

    @Override
    public Names as(Name alias) {
        return new Names(alias, this);
    }

    @Override
    public Names as(Table<?> alias) {
        return new Names(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Names rename(String name) {
        return new Names(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Names rename(Name name) {
        return new Names(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Names rename(Table<?> name) {
        return new Names(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, java.util.UUID, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super java.util.UUID, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super java.util.UUID, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
