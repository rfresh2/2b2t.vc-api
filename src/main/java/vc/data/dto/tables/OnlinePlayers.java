/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Public;
import vc.data.dto.tables.records.OnlinePlayersRecord;

import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OnlinePlayers extends TableImpl<OnlinePlayersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.online_players</code>
     */
    public static final OnlinePlayers ONLINE_PLAYERS = new OnlinePlayers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OnlinePlayersRecord> getRecordType() {
        return OnlinePlayersRecord.class;
    }

    /**
     * The column <code>public.online_players.player_name</code>.
     */
    public final TableField<OnlinePlayersRecord, String> PLAYER_NAME = createField(DSL.name("player_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.online_players.player_uuid</code>.
     */
    public final TableField<OnlinePlayersRecord, UUID> PLAYER_UUID = createField(DSL.name("player_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.online_players.join_time</code>.
     */
    public final TableField<OnlinePlayersRecord, OffsetDateTime> JOIN_TIME = createField(DSL.name("join_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private OnlinePlayers(Name alias, Table<OnlinePlayersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OnlinePlayers(Name alias, Table<OnlinePlayersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "online_players" as  SELECT player_name,
          player_uuid,
          join_time
         FROM ( SELECT connections.player_name,
                  connections.player_uuid,
                  max(
                      CASE
                          WHEN (connections.connection = 'JOIN'::connectiontype) THEN connections."time"
                          ELSE NULL::timestamp with time zone
                      END) AS join_time,
                  max(
                      CASE
                          WHEN (connections.connection = 'LEAVE'::connectiontype) THEN connections."time"
                          ELSE NULL::timestamp with time zone
                      END) AS leave_time
                 FROM connections
                WHERE (connections."time" > (now() - '06:00:00'::interval))
                GROUP BY connections.player_name, connections.player_uuid) subquery
        WHERE (join_time > COALESCE(leave_time, ('2000-01-01 00:00:00'::timestamp without time zone)::timestamp with time zone))
        ORDER BY (player_name COLLATE "C");
        """), where);
    }

    /**
     * Create an aliased <code>public.online_players</code> table reference
     */
    public OnlinePlayers(String alias) {
        this(DSL.name(alias), ONLINE_PLAYERS);
    }

    /**
     * Create an aliased <code>public.online_players</code> table reference
     */
    public OnlinePlayers(Name alias) {
        this(alias, ONLINE_PLAYERS);
    }

    /**
     * Create a <code>public.online_players</code> table reference
     */
    public OnlinePlayers() {
        this(DSL.name("online_players"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public OnlinePlayers as(String alias) {
        return new OnlinePlayers(DSL.name(alias), this);
    }

    @Override
    public OnlinePlayers as(Name alias) {
        return new OnlinePlayers(alias, this);
    }

    @Override
    public OnlinePlayers as(Table<?> alias) {
        return new OnlinePlayers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OnlinePlayers rename(String name) {
        return new OnlinePlayers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OnlinePlayers rename(Name name) {
        return new OnlinePlayers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OnlinePlayers rename(Table<?> name) {
        return new OnlinePlayers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnlinePlayers where(Condition condition) {
        return new OnlinePlayers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnlinePlayers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnlinePlayers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnlinePlayers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OnlinePlayers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OnlinePlayers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OnlinePlayers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OnlinePlayers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnlinePlayers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OnlinePlayers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
