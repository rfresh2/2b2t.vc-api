/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Public;
import vc.data.dto.tables.records.MaxConsMonthViewRecord;

import java.util.UUID;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MaxConsMonthView extends TableImpl<MaxConsMonthViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.max_cons_month_view</code>
     */
    public static final MaxConsMonthView MAX_CONS_MONTH_VIEW = new MaxConsMonthView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaxConsMonthViewRecord> getRecordType() {
        return MaxConsMonthViewRecord.class;
    }

    /**
     * The column <code>public.max_cons_month_view.p_uuid</code>.
     */
    public final TableField<MaxConsMonthViewRecord, UUID> P_UUID = createField(DSL.name("p_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.max_cons_month_view.max_cons</code>.
     */
    public final TableField<MaxConsMonthViewRecord, Integer> MAX_CONS = createField(DSL.name("max_cons"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.max_cons_month_view.p_name</code>.
     */
    public final TableField<MaxConsMonthViewRecord, String> P_NAME = createField(DSL.name("p_name"), SQLDataType.CLOB, this, "");

    private MaxConsMonthView(Name alias, Table<MaxConsMonthViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaxConsMonthView(Name alias, Table<MaxConsMonthViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.materializedView());
    }

    /**
     * Create an aliased <code>public.max_cons_month_view</code> table reference
     */
    public MaxConsMonthView(String alias) {
        this(DSL.name(alias), MAX_CONS_MONTH_VIEW);
    }

    /**
     * Create an aliased <code>public.max_cons_month_view</code> table reference
     */
    public MaxConsMonthView(Name alias) {
        this(alias, MAX_CONS_MONTH_VIEW);
    }

    /**
     * Create a <code>public.max_cons_month_view</code> table reference
     */
    public MaxConsMonthView() {
        this(DSL.name("max_cons_month_view"), null);
    }

    public <O extends Record> MaxConsMonthView(Table<O> child, ForeignKey<O, MaxConsMonthViewRecord> key) {
        super(child, key, MAX_CONS_MONTH_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public MaxConsMonthView as(String alias) {
        return new MaxConsMonthView(DSL.name(alias), this);
    }

    @Override
    public MaxConsMonthView as(Name alias) {
        return new MaxConsMonthView(alias, this);
    }

    @Override
    public MaxConsMonthView as(Table<?> alias) {
        return new MaxConsMonthView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaxConsMonthView rename(String name) {
        return new MaxConsMonthView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaxConsMonthView rename(Name name) {
        return new MaxConsMonthView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaxConsMonthView rename(Table<?> name) {
        return new MaxConsMonthView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
