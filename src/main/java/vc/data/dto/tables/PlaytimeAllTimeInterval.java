/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;
import vc.data.dto.Public;
import vc.data.dto.tables.records.PlaytimeAllTimeIntervalRecord;

import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PlaytimeAllTimeInterval extends TableImpl<PlaytimeAllTimeIntervalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.playtime_all_time_interval</code>
     */
    public static final PlaytimeAllTimeInterval PLAYTIME_ALL_TIME_INTERVAL = new PlaytimeAllTimeInterval();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaytimeAllTimeIntervalRecord> getRecordType() {
        return PlaytimeAllTimeIntervalRecord.class;
    }

    /**
     * The column <code>public.playtime_all_time_interval.p_uuid</code>.
     */
    public final TableField<PlaytimeAllTimeIntervalRecord, UUID> P_UUID = createField(DSL.name("p_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.playtime_all_time_interval.playtime</code>.
     */
    public final TableField<PlaytimeAllTimeIntervalRecord, Integer> PLAYTIME = createField(DSL.name("playtime"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.playtime_all_time_interval.p_name</code>.
     */
    public final TableField<PlaytimeAllTimeIntervalRecord, String> P_NAME = createField(DSL.name("p_name"), SQLDataType.CLOB, this, "");

    private PlaytimeAllTimeInterval(Name alias, Table<PlaytimeAllTimeIntervalRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
            DSL.val(null, SQLDataType.INTERVAL)
        });
    }

    private PlaytimeAllTimeInterval(Name alias, Table<PlaytimeAllTimeIntervalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.playtime_all_time_interval</code> table
     * reference
     */
    public PlaytimeAllTimeInterval(String alias) {
        this(DSL.name(alias), PLAYTIME_ALL_TIME_INTERVAL);
    }

    /**
     * Create an aliased <code>public.playtime_all_time_interval</code> table
     * reference
     */
    public PlaytimeAllTimeInterval(Name alias) {
        this(alias, PLAYTIME_ALL_TIME_INTERVAL);
    }

    /**
     * Create a <code>public.playtime_all_time_interval</code> table reference
     */
    public PlaytimeAllTimeInterval() {
        this(DSL.name("playtime_all_time_interval"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public PlaytimeAllTimeInterval as(String alias) {
        return new PlaytimeAllTimeInterval(DSL.name(alias), this, parameters);
    }

    @Override
    public PlaytimeAllTimeInterval as(Name alias) {
        return new PlaytimeAllTimeInterval(alias, this, parameters);
    }

    @Override
    public PlaytimeAllTimeInterval as(Table<?> alias) {
        return new PlaytimeAllTimeInterval(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeAllTimeInterval rename(String name) {
        return new PlaytimeAllTimeInterval(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeAllTimeInterval rename(Name name) {
        return new PlaytimeAllTimeInterval(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeAllTimeInterval rename(Table<?> name) {
        return new PlaytimeAllTimeInterval(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PlaytimeAllTimeInterval call(
          OffsetDateTime endT
        , YearToSecond tInterval
    ) {
        PlaytimeAllTimeInterval result = new PlaytimeAllTimeInterval(DSL.name("playtime_all_time_interval"), null, new Field[] {
            DSL.val(endT, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
            DSL.val(tInterval, SQLDataType.INTERVAL)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public PlaytimeAllTimeInterval call(
          Field<OffsetDateTime> endT
        , Field<YearToSecond> tInterval
    ) {
        PlaytimeAllTimeInterval result = new PlaytimeAllTimeInterval(DSL.name("playtime_all_time_interval"), null, new Field[] {
            endT,
            tInterval
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
