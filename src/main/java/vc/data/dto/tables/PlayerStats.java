/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Public;
import vc.data.dto.tables.records.PlayerStatsRecord;

import java.time.OffsetDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PlayerStats extends TableImpl<PlayerStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.player_stats</code>
     */
    public static final PlayerStats PLAYER_STATS = new PlayerStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerStatsRecord> getRecordType() {
        return PlayerStatsRecord.class;
    }

    /**
     * The column <code>public.player_stats.join_count</code>.
     */
    public final TableField<PlayerStatsRecord, Long> JOIN_COUNT = createField(DSL.name("join_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.player_stats.leave_count</code>.
     */
    public final TableField<PlayerStatsRecord, Long> LEAVE_COUNT = createField(DSL.name("leave_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.player_stats.death_count</code>.
     */
    public final TableField<PlayerStatsRecord, Long> DEATH_COUNT = createField(DSL.name("death_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.player_stats.kill_count</code>.
     */
    public final TableField<PlayerStatsRecord, Long> KILL_COUNT = createField(DSL.name("kill_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.player_stats.first_seen</code>.
     */
    public final TableField<PlayerStatsRecord, OffsetDateTime> FIRST_SEEN = createField(DSL.name("first_seen"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.player_stats.last_seen</code>.
     */
    public final TableField<PlayerStatsRecord, OffsetDateTime> LAST_SEEN = createField(DSL.name("last_seen"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.player_stats.playtime</code>.
     */
    public final TableField<PlayerStatsRecord, Integer> PLAYTIME = createField(DSL.name("playtime"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.player_stats.playtime_30_days</code>.
     */
    public final TableField<PlayerStatsRecord, Integer> PLAYTIME_30_DAYS = createField(DSL.name("playtime_30_days"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.player_stats.chats_count</code>.
     */
    public final TableField<PlayerStatsRecord, Long> CHATS_COUNT = createField(DSL.name("chats_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.player_stats.prio</code>.
     */
    public final TableField<PlayerStatsRecord, Boolean> PRIO = createField(DSL.name("prio"), SQLDataType.BOOLEAN, this, "");

    private PlayerStats(Name alias, Table<PlayerStatsRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.UUID)
        });
    }

    private PlayerStats(Name alias, Table<PlayerStatsRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private PlayerStats(Name alias, Table<PlayerStatsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>public.player_stats</code> table reference
     */
    public PlayerStats(String alias) {
        this(DSL.name(alias), PLAYER_STATS);
    }

    /**
     * Create an aliased <code>public.player_stats</code> table reference
     */
    public PlayerStats(Name alias) {
        this(alias, PLAYER_STATS);
    }

    /**
     * Create a <code>public.player_stats</code> table reference
     */
    public PlayerStats() {
        this(DSL.name("player_stats"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public PlayerStats as(String alias) {
        return new PlayerStats(DSL.name(alias), this, parameters);
    }

    @Override
    public PlayerStats as(Name alias) {
        return new PlayerStats(alias, this, parameters);
    }

    @Override
    public PlayerStats as(Table<?> alias) {
        return new PlayerStats(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerStats rename(String name) {
        return new PlayerStats(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerStats rename(Name name) {
        return new PlayerStats(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerStats rename(Table<?> name) {
        return new PlayerStats(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PlayerStats call(
          UUID pUuid
    ) {
        PlayerStats result = new PlayerStats(DSL.name("player_stats"), null, new Field[] {
            DSL.val(pUuid, SQLDataType.UUID)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public PlayerStats call(
          Field<UUID> pUuid
    ) {
        PlayerStats result = new PlayerStats(DSL.name("player_stats"), null, new Field[] {
            pUuid
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
