/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Public;
import vc.data.dto.tables.records.GetUuidDataRecord;

import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GetUuidData extends TableImpl<GetUuidDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.get_uuid_data</code>
     */
    public static final GetUuidData GET_UUID_DATA = new GetUuidData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetUuidDataRecord> getRecordType() {
        return GetUuidDataRecord.class;
    }

    /**
     * The column <code>public.get_uuid_data.time</code>.
     */
    public final TableField<GetUuidDataRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.get_uuid_data.data</code>.
     */
    public final TableField<GetUuidDataRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.get_uuid_data.table_name</code>.
     */
    public final TableField<GetUuidDataRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.CLOB, this, "");

    private GetUuidData(Name alias, Table<GetUuidDataRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.UUID)
        });
    }

    private GetUuidData(Name alias, Table<GetUuidDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.get_uuid_data</code> table reference
     */
    public GetUuidData(String alias) {
        this(DSL.name(alias), GET_UUID_DATA);
    }

    /**
     * Create an aliased <code>public.get_uuid_data</code> table reference
     */
    public GetUuidData(Name alias) {
        this(alias, GET_UUID_DATA);
    }

    /**
     * Create a <code>public.get_uuid_data</code> table reference
     */
    public GetUuidData() {
        this(DSL.name("get_uuid_data"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public GetUuidData as(String alias) {
        return new GetUuidData(DSL.name(alias), this, parameters);
    }

    @Override
    public GetUuidData as(Name alias) {
        return new GetUuidData(alias, this, parameters);
    }

    @Override
    public GetUuidData as(Table<?> alias) {
        return new GetUuidData(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetUuidData rename(String name) {
        return new GetUuidData(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetUuidData rename(Name name) {
        return new GetUuidData(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetUuidData rename(Table<?> name) {
        return new GetUuidData(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<OffsetDateTime, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetUuidData call(
          UUID pUuid
    ) {
        GetUuidData result = new GetUuidData(DSL.name("get_uuid_data"), null, new Field[] {
            DSL.val(pUuid, SQLDataType.UUID)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GetUuidData call(
          Field<UUID> pUuid
    ) {
        GetUuidData result = new GetUuidData(DSL.name("get_uuid_data"), null, new Field[] {
            pUuid
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super OffsetDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super OffsetDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
