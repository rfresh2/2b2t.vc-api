/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Indexes;
import vc.data.dto.Public;
import vc.data.dto.tables.records.QueuelengthRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Queuelength extends TableImpl<QueuelengthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.queuelength</code>
     */
    public static final Queuelength QUEUELENGTH = new Queuelength();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QueuelengthRecord> getRecordType() {
        return QueuelengthRecord.class;
    }

    /**
     * The column <code>public.queuelength.time</code>.
     */
    public final TableField<QueuelengthRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.queuelength.prio</code>.
     */
    public final TableField<QueuelengthRecord, Short> PRIO = createField(DSL.name("prio"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.queuelength.regular</code>.
     */
    public final TableField<QueuelengthRecord, Short> REGULAR = createField(DSL.name("regular"), SQLDataType.SMALLINT, this, "");

    private Queuelength(Name alias, Table<QueuelengthRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Queuelength(Name alias, Table<QueuelengthRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.queuelength</code> table reference
     */
    public Queuelength(String alias) {
        this(DSL.name(alias), QUEUELENGTH);
    }

    /**
     * Create an aliased <code>public.queuelength</code> table reference
     */
    public Queuelength(Name alias) {
        this(alias, QUEUELENGTH);
    }

    /**
     * Create a <code>public.queuelength</code> table reference
     */
    public Queuelength() {
        this(DSL.name("queuelength"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.QUEUELENGTH_TIME_IDX);
    }

    @Override
    public Queuelength as(String alias) {
        return new Queuelength(DSL.name(alias), this);
    }

    @Override
    public Queuelength as(Name alias) {
        return new Queuelength(alias, this);
    }

    @Override
    public Queuelength as(Table<?> alias) {
        return new Queuelength(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Queuelength rename(String name) {
        return new Queuelength(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Queuelength rename(Name name) {
        return new Queuelength(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Queuelength rename(Table<?> name) {
        return new Queuelength(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Queuelength where(Condition condition) {
        return new Queuelength(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Queuelength where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Queuelength where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Queuelength where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Queuelength where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Queuelength where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Queuelength where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Queuelength where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Queuelength whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Queuelength whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
