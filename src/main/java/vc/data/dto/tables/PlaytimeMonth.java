/*
 * This file is generated by jOOQ.
 */
package vc.data.dto.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import vc.data.dto.Public;
import vc.data.dto.tables.records.PlaytimeMonthRecord;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PlaytimeMonth extends TableImpl<PlaytimeMonthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.playtime_month</code>
     */
    public static final PlaytimeMonth PLAYTIME_MONTH = new PlaytimeMonth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaytimeMonthRecord> getRecordType() {
        return PlaytimeMonthRecord.class;
    }

    /**
     * The column <code>public.playtime_month.player_name</code>.
     */
    public final TableField<PlaytimeMonthRecord, String> PLAYER_NAME = createField(DSL.name("player_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.playtime_month.player_uuid</code>.
     */
    public final TableField<PlaytimeMonthRecord, UUID> PLAYER_UUID = createField(DSL.name("player_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.playtime_month.playtime_days</code>.
     */
    public final TableField<PlaytimeMonthRecord, BigDecimal> PLAYTIME_DAYS = createField(DSL.name("playtime_days"), SQLDataType.NUMERIC.nullable(false), this, "");

    private PlaytimeMonth(Name alias, Table<PlaytimeMonthRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PlaytimeMonth(Name alias, Table<PlaytimeMonthRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.playtime_month</code> table reference
     */
    public PlaytimeMonth(String alias) {
        this(DSL.name(alias), PLAYTIME_MONTH);
    }

    /**
     * Create an aliased <code>public.playtime_month</code> table reference
     */
    public PlaytimeMonth(Name alias) {
        this(alias, PLAYTIME_MONTH);
    }

    /**
     * Create a <code>public.playtime_month</code> table reference
     */
    public PlaytimeMonth() {
        this(DSL.name("playtime_month"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public PlaytimeMonth as(String alias) {
        return new PlaytimeMonth(DSL.name(alias), this);
    }

    @Override
    public PlaytimeMonth as(Name alias) {
        return new PlaytimeMonth(alias, this);
    }

    @Override
    public PlaytimeMonth as(Table<?> alias) {
        return new PlaytimeMonth(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeMonth rename(String name) {
        return new PlaytimeMonth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeMonth rename(Name name) {
        return new PlaytimeMonth(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeMonth rename(Table<?> name) {
        return new PlaytimeMonth(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaytimeMonth where(Condition condition) {
        return new PlaytimeMonth(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaytimeMonth where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaytimeMonth where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaytimeMonth where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaytimeMonth where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaytimeMonth where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaytimeMonth where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaytimeMonth where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaytimeMonth whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaytimeMonth whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
